import asyncio
import random

class Restaurant:
    def __init__(self, num_tables):
        self.tables = asyncio.Semaphore(num_tables)  # ‡πÉ‡∏ä‡πâ semaphore ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ï‡πä‡∏∞
        self.waiting_customers = asyncio.Queue()  # ‡πÉ‡∏ä‡πâ queue ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠

    async def seat_customer(self, customer_id):
        """‡∏à‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"""
        await self.tables.acquire()  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ï‡πä‡∏∞‡∏ß‡πà‡∏≤‡∏á
        print(f"ü™ë ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {customer_id} ‡πÑ‡∏î‡πâ‡πÇ‡∏ï‡πä‡∏∞")
        await self.take_order(customer_id)

    async def take_order(self, customer_id):
        """‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"""
        await asyncio.sleep(random.uniform(1, 3))
        print(f"üìã ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {customer_id}")
        await self.prepare_food(customer_id)

    async def prepare_food(self, customer_id):
        """‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£"""
        await asyncio.sleep(random.uniform(3, 6))
        print(f"üî• ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {customer_id} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü")
        await self.serve_food(customer_id)

    async def serve_food(self, customer_id):
        """‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏≠‡∏≤‡∏´‡∏≤‡∏£"""
        await asyncio.sleep(random.uniform(1, 2))
        print(f"üçΩÔ∏è ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {customer_id} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß")
        await self.customer_leaves(customer_id)

    async def customer_leaves(self, customer_id):
        """‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏¥‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô"""
        await asyncio.sleep(random.uniform(2, 4))
        print(f"üí∞ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {customer_id} ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô")
        self.tables.release()  # ‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
        await self.waiting_customers.get()  # ‡πÄ‡∏≠‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å queue
        self.waiting_customers.task_done()  # ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ

async def customer_task(customer_id, restaurant):
    """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô"""
    print(f"üö∂‚Äç‚ôÇ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {customer_id} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô")
    await restaurant.waiting_customers.put(customer_id)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô queue
    await restaurant.seat_customer(customer_id)

async def main():
    num_tables = 3  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ï‡πä‡∏∞
    restaurant = Restaurant(num_tables)
    customers = [customer_task(i, restaurant) for i in range(1, 8)]  # ‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ 7 ‡∏Ñ‡∏ô
    
    await asyncio.gather(*customers)  # ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å task ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    await restaurant.waiting_customers.join()  # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô

if __name__ == "__main__":
    asyncio.run(main())
